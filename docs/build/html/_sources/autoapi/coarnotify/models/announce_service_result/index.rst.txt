coarnotify.models.announce_service_result
=========================================

.. py:module:: coarnotify.models.announce_service_result


Classes
-------

.. autoapisummary::

   coarnotify.models.announce_service_result.AnnounceServiceResult
   coarnotify.models.announce_service_result.AnnounceServiceResultContext
   coarnotify.models.announce_service_result.AnnounceServiceResultItem
   coarnotify.models.announce_service_result.AnnounceServiceResultObject


Module Contents
---------------

.. py:class:: AnnounceServiceResult(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None)

   Bases: :py:obj:`coarnotify.models.notify.NotifyPattern`


   .. py:attribute:: TYPE


   .. py:property:: object
      :type: Union[coarnotify.models.notify.NotifyObject, None]



   .. py:property:: context
      :type: Union[coarnotify.models.notify.NotifyObject, None]



.. py:class:: AnnounceServiceResultContext(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None)

   Bases: :py:obj:`coarnotify.models.notify.NotifyObject`


   Can be used to represent an `object` or a `context`


   .. py:property:: item
      :type: Union[coarnotify.models.notify.NotifyItem, None]



.. py:class:: AnnounceServiceResultItem(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None)

   Bases: :py:obj:`coarnotify.models.notify.NotifyItem`


   .. py:method:: validate()


.. py:class:: AnnounceServiceResultObject(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None)

   Bases: :py:obj:`coarnotify.models.notify.NotifyObject`


   Can be used to represent an `object` or a `context`


   .. py:method:: validate()


