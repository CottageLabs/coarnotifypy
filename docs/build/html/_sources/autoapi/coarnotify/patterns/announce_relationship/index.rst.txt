coarnotify.patterns.announce_relationship
=========================================

.. py:module:: coarnotify.patterns.announce_relationship

.. autoapi-nested-parse::

   Pattern to represent an Announce Relationship notification
   https://coar-notify.net/specification/1.0.0/announce-relationship/



Classes
-------

.. autoapisummary::

   coarnotify.patterns.announce_relationship.AnnounceRelationship
   coarnotify.patterns.announce_relationship.AnnounceRelationshipObject


Module Contents
---------------

.. py:class:: AnnounceRelationship(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None, properties_by_reference=True)

   Bases: :py:obj:`coarnotify.core.notify.NotifyPattern`


   Class to represent an Announce Relationship notification


   .. py:attribute:: TYPE

      Announce Relationship types, including an ActivityStreams announce and a COAR Notify Relationship Action



   .. py:property:: object
      :type: Union[AnnounceRelationshipObject, None]


      Custom getter to retrieve the object property as an AnnounceRelationshipObject



.. py:class:: AnnounceRelationshipObject(stream: Union[coarnotify.core.activitystreams2.ActivityStream, dict] = None, validate_stream_on_construct=True, validate_properties=True, validators=None, validation_context=None, properties_by_reference=True)

   Bases: :py:obj:`coarnotify.core.notify.NotifyObject`


   Custom object class for Announce Relationship to apply the custom validation


   .. py:method:: validate() -> bool

      Extend the base validation to include the following constraints:

      * The object triple is required and each part must validate

      :return:



