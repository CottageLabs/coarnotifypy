coarnotify.test.server.inbox
============================

.. py:module:: coarnotify.test.server.inbox


Attributes
----------

.. autoapisummary::

   coarnotify.test.server.inbox.app


Classes
-------

.. autoapisummary::

   coarnotify.test.server.inbox.COARNotifyServiceTestImpl


Functions
---------

.. autoapisummary::

   coarnotify.test.server.inbox.create_app
   coarnotify.test.server.inbox.inbox
   coarnotify.test.server.inbox.run_server


Module Contents
---------------

.. py:function:: create_app()

.. py:data:: app

.. py:class:: COARNotifyServiceTestImpl

   Bases: :py:obj:`coarnotify.server.COARNotifyServiceBinding`


   Interface for implementing a COAR Notify server binding.

   Server implementation should extend this class and implement the :py:meth:`notification_received` method

   That method will receive a :py:class:`NotifyPattern` object, which will be one of the known types
   and should return a :py:class:`COARNotifyReceipt` object with the appropriate status code and location URL


   .. py:method:: notification_received(notification)

      Process the receipt of the given notification, and respond with an appropriate receipt object

      :param notification: the notification object received
      :return: the receipt object to send back to the client



.. py:function:: inbox()

.. py:function:: run_server(host=None, port=None, fake_https=False)

   :param host:
   :param port:
   :param fake_https:
       if fake_https is True, develop can use https:// to access the server
       that can help for debugging Plausible
   :return:


